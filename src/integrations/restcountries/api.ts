/**
 * RestCountries.NET API
 * Web API version 3.1 for managing country items, based on previous implementations from restcountries.eu and restcountries.com.
 *
 * OpenAPI spec version: v3.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import isomorphicFetch from "isomorphic-fetch";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    constructor(protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
            this.basePath = basePath;
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * CountriesApi - fetch parameter creator
 * @export
 */
export const CountriesApiFetchParamCreator = function () {
    return {
        /**
         * 
         * @summary Gets all countries with an extended list of properties per country. By default this list  is ordered by the country's 3-letter code (CCA3).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AllGet(options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/all`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a single country by searching for ISO 3166-1 2-letter or 3-letter country code.
         * @param {string} code The ISO 3166-1 2-letter or 3-letter country code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AlphaCodeGet(code: string, options: any = {}): FetchArgs {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling v31AlphaCodeGet.');
            }
            const localVarPath = `/v3.1/alpha/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search by list of ISO 3166-1 2-letter (CCA2), 3-letter (CCA3), 3-digit CCN3 or Olympic Comitee (CIOC) country code.
         * @param {string} [codes] The ISO 3166-1 2-letter or 3-letter country codes, separated by semi-colon or comma.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AlphaGet(codes?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/alpha`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codes !== undefined) {
                localVarQueryParameter['codes'] = codes;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search by capital city.
         * @param {string} [capital] The (part of the) capital name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31CapitalGet(capital?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/capital`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (capital !== undefined) {
                localVarQueryParameter['capital'] = capital;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search by currency.
         * @param {string} [currency] The currency to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31CurrencyGet(currency?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/currency`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
         * @summary Gets a single country bij its common or official name, or its native name. The first match will be returned.
         * @param {string} countryName The full name of the country to request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31FullnameCountryNameGet(countryName: string, options: any = {}): FetchArgs {
            // verify required parameter 'countryName' is not null or undefined
            if (countryName === null || countryName === undefined) {
                throw new RequiredError('countryName','Required parameter countryName was null or undefined when calling v31FullnameCountryNameGet.');
            }
            const localVarPath = `/v3.1/fullname/{countryName}`
                .replace(`{${"countryName"}}`, encodeURIComponent(String(countryName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search by capital city.
         * @param {string} [status] The status of inpendence, either {true} or {false}. If not defined it will be considered {true}.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31IndependentGet(status?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/independent`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
         * @summary Searches countries by their common or official name, or their native name. All matches will be returned.
         * @param {string} countryName The full name of the country to request.
         * @param {string} [fullname] Defines whether the search is on the fullname or a part of the name, either {true} or {false}.   If not defined it will be considered {false}.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31NameCountryNameGet(countryName: string, fullname?: string, options: any = {}): FetchArgs {
            // verify required parameter 'countryName' is not null or undefined
            if (countryName === null || countryName === undefined) {
                throw new RequiredError('countryName','Required parameter countryName was null or undefined when calling v31NameCountryNameGet.');
            }
            const localVarPath = `/v3.1/name/{countryName}`
                .replace(`{${"countryName"}}`, encodeURIComponent(String(countryName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fullname !== undefined) {
                localVarQueryParameter['fullname'] = fullname;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search by region.
         * @param {string} [region] The region name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31RegionGet(region?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/region`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search by subregion.
         * @param {string} [subregion] The subregion name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31SubregionGet(subregion?: string, options: any = {}): FetchArgs {
            const localVarPath = `/v3.1/subregion`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subregion !== undefined) {
                localVarQueryParameter['subregion'] = subregion;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function() {
    return {
        /**
         * 
         * @summary Gets all countries with an extended list of properties per country. By default this list  is ordered by the country's 3-letter code (CCA3).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AllGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31AllGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gets a single country by searching for ISO 3166-1 2-letter or 3-letter country code.
         * @param {string} code The ISO 3166-1 2-letter or 3-letter country code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AlphaCodeGet(code: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31AlphaCodeGet(code, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search by list of ISO 3166-1 2-letter (CCA2), 3-letter (CCA3), 3-digit CCN3 or Olympic Comitee (CIOC) country code.
         * @param {string} [codes] The ISO 3166-1 2-letter or 3-letter country codes, separated by semi-colon or comma.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AlphaGet(codes?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31AlphaGet(codes, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search by capital city.
         * @param {string} [capital] The (part of the) capital name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31CapitalGet(capital?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31CapitalGet(capital, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search by currency.
         * @param {string} [currency] The currency to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31CurrencyGet(currency?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31CurrencyGet(currency, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
         * @summary Gets a single country bij its common or official name, or its native name. The first match will be returned.
         * @param {string} countryName The full name of the country to request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31FullnameCountryNameGet(countryName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31FullnameCountryNameGet(countryName, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search by capital city.
         * @param {string} [status] The status of inpendence, either {true} or {false}. If not defined it will be considered {true}.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31IndependentGet(status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31IndependentGet(status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
         * @summary Searches countries by their common or official name, or their native name. All matches will be returned.
         * @param {string} countryName The full name of the country to request.
         * @param {string} [fullname] Defines whether the search is on the fullname or a part of the name, either {true} or {false}.   If not defined it will be considered {false}.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31NameCountryNameGet(countryName: string, fullname?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31NameCountryNameGet(countryName, fullname, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search by region.
         * @param {string} [region] The region name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31RegionGet(region?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31RegionGet(region, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Search by subregion.
         * @param {string} [subregion] The subregion name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31SubregionGet(subregion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CountriesApiFetchParamCreator().v31SubregionGet(subregion, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Gets all countries with an extended list of properties per country. By default this list  is ordered by the country's 3-letter code (CCA3).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AllGet(options?: any) {
            return CountriesApiFp().v31AllGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gets a single country by searching for ISO 3166-1 2-letter or 3-letter country code.
         * @param {string} code The ISO 3166-1 2-letter or 3-letter country code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AlphaCodeGet(code: string, options?: any) {
            return CountriesApiFp().v31AlphaCodeGet(code, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search by list of ISO 3166-1 2-letter (CCA2), 3-letter (CCA3), 3-digit CCN3 or Olympic Comitee (CIOC) country code.
         * @param {string} [codes] The ISO 3166-1 2-letter or 3-letter country codes, separated by semi-colon or comma.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31AlphaGet(codes?: string, options?: any) {
            return CountriesApiFp().v31AlphaGet(codes, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search by capital city.
         * @param {string} [capital] The (part of the) capital name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31CapitalGet(capital?: string, options?: any) {
            return CountriesApiFp().v31CapitalGet(capital, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search by currency.
         * @param {string} [currency] The currency to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31CurrencyGet(currency?: string, options?: any) {
            return CountriesApiFp().v31CurrencyGet(currency, options)(fetch, basePath);
        },
        /**
         * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
         * @summary Gets a single country bij its common or official name, or its native name. The first match will be returned.
         * @param {string} countryName The full name of the country to request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31FullnameCountryNameGet(countryName: string, options?: any) {
            return CountriesApiFp().v31FullnameCountryNameGet(countryName, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search by capital city.
         * @param {string} [status] The status of inpendence, either {true} or {false}. If not defined it will be considered {true}.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31IndependentGet(status?: string, options?: any) {
            return CountriesApiFp().v31IndependentGet(status, options)(fetch, basePath);
        },
        /**
         * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
         * @summary Searches countries by their common or official name, or their native name. All matches will be returned.
         * @param {string} countryName The full name of the country to request.
         * @param {string} [fullname] Defines whether the search is on the fullname or a part of the name, either {true} or {false}.   If not defined it will be considered {false}.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31NameCountryNameGet(countryName: string, fullname?: string, options?: any) {
            return CountriesApiFp().v31NameCountryNameGet(countryName, fullname, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search by region.
         * @param {string} [region] The region name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31RegionGet(region?: string, options?: any) {
            return CountriesApiFp().v31RegionGet(region, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Search by subregion.
         * @param {string} [subregion] The subregion name to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v31SubregionGet(subregion?: string, options?: any) {
            return CountriesApiFp().v31SubregionGet(subregion, options)(fetch, basePath);
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * 
     * @summary Gets all countries with an extended list of properties per country. By default this list  is ordered by the country's 3-letter code (CCA3).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31AllGet(options?: any) {
        return CountriesApiFp().v31AllGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gets a single country by searching for ISO 3166-1 2-letter or 3-letter country code.
     * @param {string} code The ISO 3166-1 2-letter or 3-letter country code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31AlphaCodeGet(code: string, options?: any) {
        return CountriesApiFp().v31AlphaCodeGet(code, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search by list of ISO 3166-1 2-letter (CCA2), 3-letter (CCA3), 3-digit CCN3 or Olympic Comitee (CIOC) country code.
     * @param {string} [codes] The ISO 3166-1 2-letter or 3-letter country codes, separated by semi-colon or comma.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31AlphaGet(codes?: string, options?: any) {
        return CountriesApiFp().v31AlphaGet(codes, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search by capital city.
     * @param {string} [capital] The (part of the) capital name to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31CapitalGet(capital?: string, options?: any) {
        return CountriesApiFp().v31CapitalGet(capital, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search by currency.
     * @param {string} [currency] The currency to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31CurrencyGet(currency?: string, options?: any) {
        return CountriesApiFp().v31CurrencyGet(currency, options)(this.fetch, this.basePath);
    }

    /**
     * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
     * @summary Gets a single country bij its common or official name, or its native name. The first match will be returned.
     * @param {string} countryName The full name of the country to request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31FullnameCountryNameGet(countryName: string, options?: any) {
        return CountriesApiFp().v31FullnameCountryNameGet(countryName, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search by capital city.
     * @param {string} [status] The status of inpendence, either {true} or {false}. If not defined it will be considered {true}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31IndependentGet(status?: string, options?: any) {
        return CountriesApiFp().v31IndependentGet(status, options)(this.fetch, this.basePath);
    }

    /**
     * When requesting a country with blank spaces you should either use %20 or a hyphen. Example:   {/name/united%20states} or {/name/united-states}.
     * @summary Searches countries by their common or official name, or their native name. All matches will be returned.
     * @param {string} countryName The full name of the country to request.
     * @param {string} [fullname] Defines whether the search is on the fullname or a part of the name, either {true} or {false}.   If not defined it will be considered {false}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31NameCountryNameGet(countryName: string, fullname?: string, options?: any) {
        return CountriesApiFp().v31NameCountryNameGet(countryName, fullname, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search by region.
     * @param {string} [region] The region name to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31RegionGet(region?: string, options?: any) {
        return CountriesApiFp().v31RegionGet(region, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Search by subregion.
     * @param {string} [subregion] The subregion name to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public v31SubregionGet(subregion?: string, options?: any) {
        return CountriesApiFp().v31SubregionGet(subregion, options)(this.fetch, this.basePath);
    }

}
