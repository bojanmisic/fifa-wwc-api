/**
 * OpenLigaDB-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */


import * as Model from "./model";
import * as url from "url";
import isomorphicFetch from "isomorphic-fetch";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {

    constructor(protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        this.basePath = basePath;
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * MatchdataApi - fetch parameter creator
 * @export
 */
export const MatchdataApiFetchParamCreator = function () {
    return {
        /**
         * 
         * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getavailablegroupsLeagueShortcutLeagueSeasonGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getavailablegroupsLeagueShortcutLeagueSeasonGet.');
            }
            const localVarPath = `/getavailablegroups/{leagueShortcut}/{leagueSeason}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailableleaguesGet(options: any = {}): FetchArgs {
            const localVarPath = `/getavailableleagues`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailablesportsGet(options: any = {}): FetchArgs {
            const localVarPath = `/getavailablesports`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getavailableteamsLeagueShortcutLeagueSeasonGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getavailableteamsLeagueShortcutLeagueSeasonGet.');
            }
            const localVarPath = `/getavailableteams/{leagueShortcut}/{leagueSeason}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the table
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getbltableLeagueShortcutLeagueSeasonGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getbltableLeagueShortcutLeagueSeasonGet.');
            }
            const localVarPath = `/getbltable/{leagueShortcut}/{leagueSeason}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem 'Spieltag') des als Parameter zu übergebenden leagueShortcuts (z.B. 'bl1') aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcurrentgroupLeagueShortcutGet(leagueShortcut: string, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getcurrentgroupLeagueShortcutGet.');
            }
            const localVarPath = `/getcurrentgroup/{leagueShortcut}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getgoalgettersLeagueShortcutLeagueSeasonGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getgoalgettersLeagueShortcutLeagueSeasonGet.');
            }
            const localVarPath = `/getgoalgetters/{leagueShortcut}/{leagueSeason}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns the table
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getgrouptableLeagueShortcutLeagueSeasonGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getgrouptableLeagueShortcutLeagueSeasonGet.');
            }
            const localVarPath = `/getgrouptable/{leagueShortcut}/{leagueSeason}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {number} groupOrderId beim Fußball der Spieltag, z.B. 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet.');
            }
            // verify required parameter 'groupOrderId' is not null or undefined
            if (groupOrderId === null || groupOrderId === undefined) {
                throw new RequiredError('groupOrderId','Required parameter groupOrderId was null or undefined when calling getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet.');
            }
            const localVarPath = `/getlastchangedate/{leagueShortcut}/{leagueSeason}/{groupOrderId}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)))
                .replace(`{${"groupOrderId"}}`, encodeURIComponent(String(groupOrderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
         * @param {string} leagueShortcut Der Liga-Shortcut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getlastmatchbyleagueshortcutLeagueShortcutGet.');
            }
            const localVarPath = `/getlastmatchbyleagueshortcut/{leagueShortcut}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
         * @param {number} leagueId die Id der Liga
         * @param {number} teamId die Id des Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueId' is not null or undefined
            if (leagueId === null || leagueId === undefined) {
                throw new RequiredError('leagueId','Required parameter leagueId was null or undefined when calling getlastmatchbyleagueteamLeagueIdTeamIdGet.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getlastmatchbyleagueteamLeagueIdTeamIdGet.');
            }
            const localVarPath = `/getlastmatchbyleagueteam/{leagueId}/{teamId}`
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonGet.');
            }
            const localVarPath = `/getmatchdata/{leagueShortcut}/{leagueSeason}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {number} groupOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet.');
            }
            // verify required parameter 'groupOrderId' is not null or undefined
            if (groupOrderId === null || groupOrderId === undefined) {
                throw new RequiredError('groupOrderId','Required parameter groupOrderId was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet.');
            }
            const localVarPath = `/getmatchdata/{leagueShortcut}/{leagueSeason}/{groupOrderId}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)))
                .replace(`{${"groupOrderId"}}`, encodeURIComponent(String(groupOrderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \"teamFilterstring\" übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {string} teamFilterstring Name bzw. Teil des Namens eines Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut: string, leagueSeason: number, teamFilterstring: string, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet.');
            }
            // verify required parameter 'leagueSeason' is not null or undefined
            if (leagueSeason === null || leagueSeason === undefined) {
                throw new RequiredError('leagueSeason','Required parameter leagueSeason was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet.');
            }
            // verify required parameter 'teamFilterstring' is not null or undefined
            if (teamFilterstring === null || teamFilterstring === undefined) {
                throw new RequiredError('teamFilterstring','Required parameter teamFilterstring was null or undefined when calling getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet.');
            }
            const localVarPath = `/getmatchdata/{leagueShortcut}/{leagueSeason}/{teamFilterstring}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)))
                .replace(`{${"leagueSeason"}}`, encodeURIComponent(String(leagueSeason)))
                .replace(`{${"teamFilterstring"}}`, encodeURIComponent(String(teamFilterstring)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataMatchIdGet(matchId: number, options: any = {}): FetchArgs {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId','Required parameter matchId was null or undefined when calling getmatchdataMatchIdGet.');
            }
            const localVarPath = `/getmatchdata/{matchId}`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
         * @param {number} teamId1 die Id des ersten Teams
         * @param {number} teamId2 die Id des anderen Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataTeamId1TeamId2Get(teamId1: number, teamId2: number, options: any = {}): FetchArgs {
            // verify required parameter 'teamId1' is not null or undefined
            if (teamId1 === null || teamId1 === undefined) {
                throw new RequiredError('teamId1','Required parameter teamId1 was null or undefined when calling getmatchdataTeamId1TeamId2Get.');
            }
            // verify required parameter 'teamId2' is not null or undefined
            if (teamId2 === null || teamId2 === undefined) {
                throw new RequiredError('teamId2','Required parameter teamId2 was null or undefined when calling getmatchdataTeamId1TeamId2Get.');
            }
            const localVarPath = `/getmatchdata/{teamId1}/{teamId2}`
                .replace(`{${"teamId1"}}`, encodeURIComponent(String(teamId1)))
                .replace(`{${"teamId2"}}`, encodeURIComponent(String(teamId2)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} teamFilterstring 
         * @param {number} weekCountPast 
         * @param {number} weekCountFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring: string, weekCountPast: number, weekCountFuture: number, options: any = {}): FetchArgs {
            // verify required parameter 'teamFilterstring' is not null or undefined
            if (teamFilterstring === null || teamFilterstring === undefined) {
                throw new RequiredError('teamFilterstring','Required parameter teamFilterstring was null or undefined when calling getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet.');
            }
            // verify required parameter 'weekCountPast' is not null or undefined
            if (weekCountPast === null || weekCountPast === undefined) {
                throw new RequiredError('weekCountPast','Required parameter weekCountPast was null or undefined when calling getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet.');
            }
            // verify required parameter 'weekCountFuture' is not null or undefined
            if (weekCountFuture === null || weekCountFuture === undefined) {
                throw new RequiredError('weekCountFuture','Required parameter weekCountFuture was null or undefined when calling getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet.');
            }
            const localVarPath = `/getmatchesbyteam/{teamFilterstring}/{weekCountPast}/{weekCountFuture}`
                .replace(`{${"teamFilterstring"}}`, encodeURIComponent(String(teamFilterstring)))
                .replace(`{${"weekCountPast"}}`, encodeURIComponent(String(weekCountPast)))
                .replace(`{${"weekCountFuture"}}`, encodeURIComponent(String(weekCountFuture)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} teamId 
         * @param {number} weekCountPast 
         * @param {number} weekCountFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId: number, weekCountPast: number, weekCountFuture: number, options: any = {}): FetchArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet.');
            }
            // verify required parameter 'weekCountPast' is not null or undefined
            if (weekCountPast === null || weekCountPast === undefined) {
                throw new RequiredError('weekCountPast','Required parameter weekCountPast was null or undefined when calling getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet.');
            }
            // verify required parameter 'weekCountFuture' is not null or undefined
            if (weekCountFuture === null || weekCountFuture === undefined) {
                throw new RequiredError('weekCountFuture','Required parameter weekCountFuture was null or undefined when calling getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet.');
            }
            const localVarPath = `/getmatchesbyteamid/{teamId}/{weekCountPast}/{weekCountFuture}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"weekCountPast"}}`, encodeURIComponent(String(weekCountPast)))
                .replace(`{${"weekCountFuture"}}`, encodeURIComponent(String(weekCountFuture)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
         * @param {string} leagueShortcut Der Liga-Shortcut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options: any = {}): FetchArgs {
            // verify required parameter 'leagueShortcut' is not null or undefined
            if (leagueShortcut === null || leagueShortcut === undefined) {
                throw new RequiredError('leagueShortcut','Required parameter leagueShortcut was null or undefined when calling getnextmatchbyleagueshortcutLeagueShortcutGet.');
            }
            const localVarPath = `/getnextmatchbyleagueshortcut/{leagueShortcut}`
                .replace(`{${"leagueShortcut"}}`, encodeURIComponent(String(leagueShortcut)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
         * @param {number} leagueId die Id der Liga
         * @param {number} teamId die Id des Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueId' is not null or undefined
            if (leagueId === null || leagueId === undefined) {
                throw new RequiredError('leagueId','Required parameter leagueId was null or undefined when calling getnextmatchbyleagueteamLeagueIdTeamIdGet.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getnextmatchbyleagueteamLeagueIdTeamIdGet.');
            }
            const localVarPath = `/getnextmatchbyleagueteam/{leagueId}/{teamId}`
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
         * @param {number} leagueId Id der Liga, z.B. &#x27;4500&#x27; für die erste Bundesliga 2021/2022
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getresultinfosLeagueIdGet(leagueId: number, options: any = {}): FetchArgs {
            // verify required parameter 'leagueId' is not null or undefined
            if (leagueId === null || leagueId === undefined) {
                throw new RequiredError('leagueId','Required parameter leagueId was null or undefined when calling getresultinfosLeagueIdGet.');
            }
            const localVarPath = `/getresultinfos/{leagueId}`
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchdataApi - functional programming interface
 * @export
 */
export const MatchdataApiFp = function() {
    return {
        /**
         * 
         * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Group>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailableleaguesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.League>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getavailableleaguesGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailablesportsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Sport>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getavailablesportsGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Team>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary returns the table
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.BlTableTeam>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem 'Spieltag') des als Parameter zu übergebenden leagueShortcuts (z.B. 'bl1') aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcurrentgroupLeagueShortcutGet(leagueShortcut: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.Group> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getcurrentgroupLeagueShortcutGet(leagueShortcut, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.GoalGetter>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary returns the table
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.BlTableTeam>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {number} groupOrderId beim Fußball der Spieltag, z.B. 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Date> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut, leagueSeason, groupOrderId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
         * @param {string} leagueShortcut Der Liga-Shortcut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.Match> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
         * @param {number} leagueId die Id der Liga
         * @param {number} teamId die Id des Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.Match> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId, teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Match>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {number} groupOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Match>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut, leagueSeason, groupOrderId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \"teamFilterstring\" übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {string} teamFilterstring Name bzw. Teil des Namens eines Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut: string, leagueSeason: number, teamFilterstring: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Match>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut, leagueSeason, teamFilterstring, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataMatchIdGet(matchId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.Match> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchdataMatchIdGet(matchId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
         * @param {number} teamId1 die Id des ersten Teams
         * @param {number} teamId2 die Id des anderen Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataTeamId1TeamId2Get(teamId1: number, teamId2: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Match>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchdataTeamId1TeamId2Get(teamId1, teamId2, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} teamFilterstring 
         * @param {number} weekCountPast 
         * @param {number} weekCountFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring: string, weekCountPast: number, weekCountFuture: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Match>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring, weekCountPast, weekCountFuture, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} teamId 
         * @param {number} weekCountPast 
         * @param {number} weekCountFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId: number, weekCountPast: number, weekCountFuture: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Model.Match>> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId, weekCountPast, weekCountFuture, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
         * @param {string} leagueShortcut Der Liga-Shortcut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.Match> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
         * @param {number} leagueId die Id der Liga
         * @param {number} teamId die Id des Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.Match> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId, teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
         * @param {number} leagueId Id der Liga, z.B. &#x27;4500&#x27; für die erste Bundesliga 2021/2022
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getresultinfosLeagueIdGet(leagueId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model.ResultInfo> {
            const localVarFetchArgs = MatchdataApiFetchParamCreator().getresultinfosLeagueIdGet(leagueId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MatchdataApi - factory interface
 * @export
 */
export const MatchdataApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
            return MatchdataApiFp().getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailableleaguesGet(options?: any) {
            return MatchdataApiFp().getavailableleaguesGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailablesportsGet(options?: any) {
            return MatchdataApiFp().getavailablesportsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
            return MatchdataApiFp().getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(fetch, basePath);
        },
        /**
         * 
         * @summary returns the table
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
            return MatchdataApiFp().getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem 'Spieltag') des als Parameter zu übergebenden leagueShortcuts (z.B. 'bl1') aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcurrentgroupLeagueShortcutGet(leagueShortcut: string, options?: any) {
            return MatchdataApiFp().getcurrentgroupLeagueShortcutGet(leagueShortcut, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
            return MatchdataApiFp().getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(fetch, basePath);
        },
        /**
         * 
         * @summary returns the table
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
            return MatchdataApiFp().getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {number} groupOrderId beim Fußball der Spieltag, z.B. 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options?: any) {
            return MatchdataApiFp().getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut, leagueSeason, groupOrderId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
         * @param {string} leagueShortcut Der Liga-Shortcut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options?: any) {
            return MatchdataApiFp().getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
         * @param {number} leagueId die Id der Liga
         * @param {number} teamId die Id des Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options?: any) {
            return MatchdataApiFp().getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId, teamId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
            return MatchdataApiFp().getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} leagueShortcut 
         * @param {number} leagueSeason 
         * @param {number} groupOrderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options?: any) {
            return MatchdataApiFp().getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut, leagueSeason, groupOrderId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \"teamFilterstring\" übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
         * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
         * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
         * @param {string} teamFilterstring Name bzw. Teil des Namens eines Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut: string, leagueSeason: number, teamFilterstring: string, options?: any) {
            return MatchdataApiFp().getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut, leagueSeason, teamFilterstring, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataMatchIdGet(matchId: number, options?: any) {
            return MatchdataApiFp().getmatchdataMatchIdGet(matchId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
         * @param {number} teamId1 die Id des ersten Teams
         * @param {number} teamId2 die Id des anderen Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchdataTeamId1TeamId2Get(teamId1: number, teamId2: number, options?: any) {
            return MatchdataApiFp().getmatchdataTeamId1TeamId2Get(teamId1, teamId2, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} teamFilterstring 
         * @param {number} weekCountPast 
         * @param {number} weekCountFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring: string, weekCountPast: number, weekCountFuture: number, options?: any) {
            return MatchdataApiFp().getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring, weekCountPast, weekCountFuture, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} teamId 
         * @param {number} weekCountPast 
         * @param {number} weekCountFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId: number, weekCountPast: number, weekCountFuture: number, options?: any) {
            return MatchdataApiFp().getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId, weekCountPast, weekCountFuture, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
         * @param {string} leagueShortcut Der Liga-Shortcut
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options?: any) {
            return MatchdataApiFp().getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
         * @param {number} leagueId die Id der Liga
         * @param {number} teamId die Id des Teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options?: any) {
            return MatchdataApiFp().getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId, teamId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
         * @param {number} leagueId Id der Liga, z.B. &#x27;4500&#x27; für die erste Bundesliga 2021/2022
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getresultinfosLeagueIdGet(leagueId: number, options?: any) {
            return MatchdataApiFp().getresultinfosLeagueIdGet(leagueId, options)(fetch, basePath);
        },
    };
};

/**
 * MatchdataApi - object-oriented interface
 * @export
 * @class MatchdataApi
 * @extends {BaseAPI}
 */
export class MatchdataApi extends BaseAPI {
    /**
     * 
     * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
     * @param {string} leagueShortcut 
     * @param {number} leagueSeason 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
        return MatchdataApiFp().getavailablegroupsLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getavailableleaguesGet(options?: any) {
        return MatchdataApiFp().getavailableleaguesGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getavailablesportsGet(options?: any) {
        return MatchdataApiFp().getavailablesportsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
     * @param {string} leagueShortcut 
     * @param {number} leagueSeason 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
        return MatchdataApiFp().getavailableteamsLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary returns the table
     * @param {string} leagueShortcut 
     * @param {number} leagueSeason 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
        return MatchdataApiFp().getbltableLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem 'Spieltag') des als Parameter zu übergebenden leagueShortcuts (z.B. 'bl1') aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
     * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getcurrentgroupLeagueShortcutGet(leagueShortcut: string, options?: any) {
        return MatchdataApiFp().getcurrentgroupLeagueShortcutGet(leagueShortcut, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
     * @param {string} leagueShortcut 
     * @param {number} leagueSeason 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
        return MatchdataApiFp().getgoalgettersLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary returns the table
     * @param {string} leagueShortcut 
     * @param {number} leagueSeason 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
        return MatchdataApiFp().getgrouptableLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
     * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
     * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
     * @param {number} groupOrderId beim Fußball der Spieltag, z.B. 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options?: any) {
        return MatchdataApiFp().getlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut, leagueSeason, groupOrderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
     * @param {string} leagueShortcut Der Liga-Shortcut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options?: any) {
        return MatchdataApiFp().getlastmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
     * @param {number} leagueId die Id der Liga
     * @param {number} teamId die Id des Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options?: any) {
        return MatchdataApiFp().getlastmatchbyleagueteamLeagueIdTeamIdGet(leagueId, teamId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
     * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
     * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut: string, leagueSeason: number, options?: any) {
        return MatchdataApiFp().getmatchdataLeagueShortcutLeagueSeasonGet(leagueShortcut, leagueSeason, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} leagueShortcut 
     * @param {number} leagueSeason 
     * @param {number} groupOrderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut: string, leagueSeason: number, groupOrderId: number, options?: any) {
        return MatchdataApiFp().getmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(leagueShortcut, leagueSeason, groupOrderId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \"teamFilterstring\" übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
     * @param {string} leagueShortcut der Shortcut der Liga, z.B. &#x27;bl1&#x27; für die erste Bundesliga
     * @param {number} leagueSeason die Saison der Liga, z.B. 2019 für die Saison 2019/2020
     * @param {string} teamFilterstring Name bzw. Teil des Namens eines Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut: string, leagueSeason: number, teamFilterstring: string, options?: any) {
        return MatchdataApiFp().getmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(leagueShortcut, leagueSeason, teamFilterstring, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchdataMatchIdGet(matchId: number, options?: any) {
        return MatchdataApiFp().getmatchdataMatchIdGet(matchId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
     * @param {number} teamId1 die Id des ersten Teams
     * @param {number} teamId2 die Id des anderen Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchdataTeamId1TeamId2Get(teamId1: number, teamId2: number, options?: any) {
        return MatchdataApiFp().getmatchdataTeamId1TeamId2Get(teamId1, teamId2, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} teamFilterstring 
     * @param {number} weekCountPast 
     * @param {number} weekCountFuture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring: string, weekCountPast: number, weekCountFuture: number, options?: any) {
        return MatchdataApiFp().getmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(teamFilterstring, weekCountPast, weekCountFuture, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} teamId 
     * @param {number} weekCountPast 
     * @param {number} weekCountFuture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId: number, weekCountPast: number, weekCountFuture: number, options?: any) {
        return MatchdataApiFp().getmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(teamId, weekCountPast, weekCountFuture, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
     * @param {string} leagueShortcut Der Liga-Shortcut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut: string, options?: any) {
        return MatchdataApiFp().getnextmatchbyleagueshortcutLeagueShortcutGet(leagueShortcut, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
     * @param {number} leagueId die Id der Liga
     * @param {number} teamId die Id des Teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId: number, teamId: number, options?: any) {
        return MatchdataApiFp().getnextmatchbyleagueteamLeagueIdTeamIdGet(leagueId, teamId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
     * @param {number} leagueId Id der Liga, z.B. &#x27;4500&#x27; für die erste Bundesliga 2021/2022
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchdataApi
     */
    public getresultinfosLeagueIdGet(leagueId: number, options?: any) {
        return MatchdataApiFp().getresultinfosLeagueIdGet(leagueId, options)(this.fetch, this.basePath);
    }

}
